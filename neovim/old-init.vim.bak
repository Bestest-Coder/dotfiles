call plug#begin(stdpath('data'),'/plugged')

" Icons
Plug 'ryanoasis/vim-devicons'

" Treesitter
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" airline status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Autocompletion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" file tree
Plug 'preservim/nerdtree'
Plug 'johnstef99/vim-nerdtree-syntax-highlight'

" GDB integration
Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh' }

" Syntastic
" Plug 'vim-syntastic/syntastic'

" Syntax Highlighting/Language packs
Plug 'sheerun/vim-polyglot'

" C/C++ better highlighting
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'jackguo380/vim-lsp-cxx-highlight'

" git integration
Plug 'tpope/vim-fugitive'

" debugger
Plug 'puremourning/vimspector'

" Telescope
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Commenting
Plug 'numToStr/Comment.nvim'

"-----Themes-----
Plug 'joshdick/onedark.vim'

" sudo save
Plug 'lambdalisue/suda.vim'

" airline
Plug 'vim-airline/vim-airline'

" Rust autocomplete
Plug 'rust-lang/rust.vim'

" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" indetation characters
Plug 'lukas-reineke/indent-blankline.nvim'

" firenvim
Plug 'glacambre/firenvim', { 'do': {_ -> firenvim#install(0)}}

" funny cellular automation
Plug 'eandrju/cellular-automaton.nvim'

call plug#end()

set termguicolors
colorscheme onedark
syntax on
set signcolumn=yes

" mouse support
set mouse=a

" Comment setup
lua require('Comment').setup()

"----Personal Custom Stuff----

let g:airline#extensions#term#enabled = 1

" augroup CustomComamnds
" command to open init.vim from anywhere
command! Initvim :e ~/.config/nvim/init.vim

command! I3config :cd ~/.config/i3 | NERDTreeCWD

" switch current working directory to current year of classes and refresh
" NERDTree display
command! Classes :cd ~/Documents/2022-2023 Classes | NERDTreeCWD

" change current working directory to home and refresh NERDTree display
command! Backhome :cd ~ | NERDTreeCWD

" use :W to save with root
command! W :execute ':w !sudo tee % > /dev/null' | :edit!

" use :Ccf (Copy Current File) to copy the path of current working file to
" clipboard
command! Ccf let @+=expand("%:p")

" lets Esc be used to exit terminal mode
tnoremap <Esc> <C-\><C-n>

" use ctrl + i in html files to start editing end of inside tag
autocmd! FileType html nnoremap <C-i> vit<Esc>a

" use :Sp to enable spellcheck, Spn to turn off
command Sp set spell spelllang=en_us
command Spn set nospell

" add tab and eol symbols
set list
set listchars=tab:⇒\ " ignore
set expandtab
set tabstop=4
set shiftwidth=4

"-------Syntastic Stuff ---------
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:airline#extensions#syntastic#enabled = 1
let g:syntastic_quiet_messages = { "type": "style" }
" let g:syntastic_cpp_checkers = ['GCC']

let g:airline#extensions#branch#enabled = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ":t"

let g:airline_powerline_fonts = 1

let g:airline#extensions#nerdtree_statusline = 1

set noswapfile

set relativenumber

"----------Buffer to Tab------
" This allows buffers to be hidden if you've modified a buffer
" This is almost a must if you wish to use buffers in this way.
set hidden

" let terminal buffers appear in tabline
let g:airline#extensions#tabline#ignore_bufadd_pat = "defx|gundo|nerd_tree|startify|tagbar|undotree|vimfilfer"

" To open a new empty buffer
" This replcaes :tabnew which I used to bind to this mapping
nmap <leader>T :enew<CR>

" Move the the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp<bar>sp<bar>bn<bar>bd<CR>
" closes buffer with force (I'm an idiot and try and edit read only files)
nmap <leader>bQ :bp<bar>sp<bar>bn<bar>bd!<CR>


" Show all open buffers and their status
nmap <leader>bl :ls<CR>

autocmd VimEnter * if !exists('g:started_by_firenvim') |  NERDTree | wincmd p | endif
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

augroup Binary
	au!
	au BufReadPre  *.bin let &bin=1
	au BufReadPost *.bin if &bin | %!xxd
	au BufReadPost *.bin set ft=xxd | endif
	au BufWritePre *.bin if &bin | %!xxd -r
	au BufWritePre *.bin endif
	au BufWritePost *.bin if &bin | %!xxd
	au BufWritePost *.bin set nomod | endif
augroup END

augroup TSV
	au!
	au BufEnter *.tsv set tabstop=30 | set nowrap | set listchars=tab:<->
	au BufLeave *.tsv set tabstop=4 | set wrap | set listchars=tab:⇒\ "
augroup END


"-------COC stuff--------
if has('nvim')
	inoremap <silent><expr> <c-space> coc#refresh()
else
	inoremap <silent><expr> <c-@> coc#refresh()
endif


inoremap <silent><expr> <TAB>
		\ coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

nnoremap <silent> K :call ShowDocumentation()<CR>
autocmd CursorHold * silent call CocActionAsync('highlight')

inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
nnoremap <leader>cd <cmd>CocDiagnostics<CR>

" fzf
if has("nvim")
	" Escape inside a FZF terminal window should exit the terminal window
	" rather than going into the terminal's normal mode.
	autocmd FileType fzf tnoremap <buffer> <Esc> <Esc>
endif

" :terminal use ALT+h,j,k,l
augroup TerminalNav
	au!
	tnoremap <A-h> <C-\><C-N><C-w>h
	tnoremap <A-j> <C-\><C-N><C-w>j
	tnoremap <A-k> <C-\><C-N><C-w>k
	tnoremap <A-l> <C-\><C-N><C-w>l
	inoremap <A-h> <C-\><C-N><C-w>h
	inoremap <A-j> <C-\><C-N><C-w>j
	inoremap <A-k> <C-\><C-N><C-w>k
	inoremap <A-l> <C-\><C-N><C-w>l
	nnoremap <A-h> <C-w>h
	nnoremap <A-j> <C-w>j
	nnoremap <A-k> <C-w>k
	nnoremap <A-l> <C-w>l
augroup END

"---indent_blankline setup---
highlight indentHighlight1 guifg=#e06c75
highlight indentHighlight2 guifg=#e5c07b
highlight indentHighlight3 guifg=#98c739
highlight indentHighlight4 guifg=#56b6c2
highlight indentHighlight5 guifg=#61afef
highlight indentHighlight6 guifg=#c768dd
let g:indent_blankline_char_highlight_list = ["indentHighlight1", "indentHighlight2", "indentHighlight3",
			\"indentHighlight4","indentHighlight5","indentHighlight6"]
let g:indent_blankline_char = "⇒"
let g:indent_blankline_show_current_context = 1
let g:indent_blankline_show_current_context_start = 1

" lua require("indent_blankline").setup({
"     space_char_blankline = " ",
"     char_highlight_list = {
"         "1f1f1f",
"         "1a1a1a",
"     },
" 		show_current_context = true,
" 		show_current_context_start = true
" }


"------firenvim------
let g:firenvim_config = {
	\ 'localSettings': {
		\ '.*' : {
			\ 'takeover': 'never'
		\ }
	\ }
	\ }

"----telescope-----
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fm <cmd>Telescope man_pages<cr>
nnoremap <leader>ft <cmd>Telescope treesitter<cr>
